<!DOCTYPE html>
<html lang="en">

    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Added CSP to allow Zoho form submissions -->
    <meta http-equiv="Content-Security-Policy" content="default-src * 'self' data: gap: https://ssl.gstatic.com 'unsafe-eval' 'unsafe-inline'; style-src * 'self' 'unsafe-inline'; script-src * 'self' 'unsafe-inline' 'unsafe-eval'; connect-src * 'self'; img-src * data: blob: 'self'; frame-src *; object-src 'none';">
    <title>Resume Screener Form Dynamic</title>
    <style>
        /* Basic styling for the example */
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }
        .header {
            background-color: #f5f5f5;
            padding: 10px 20px;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .form-container {
            max-width: 600px;
            margin: 30px auto;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f6f7fb;
        }
        .form-title {
            margin-top: 0;
            margin-bottom: 20px;
            color: #333;
        }
        .form-field {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
            color: #555;
        }
        input[type="text"],
        input[type="email"],
        select,
        textarea {
            width: 100%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 16px;
        }
        textarea {
            height: 120px;
            resize: both; /* Allow resizing in both directions */
            min-height: 100px;
        }
        .submit-btn {
            background-color: #33495E;
            color: white;
            padding: 12px 40px;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            font-size: 18px;
            display: block;
            margin: 0 auto;
        }
        .submit-btn:hover {
            background-color: #140F3B;
        }
        small {
            color: #666;
            font-size: 12px;
            margin-top: 2px;
            display: block;
        }
        .form-response {
            padding: 15px;
            margin-top: 20px;
            border-radius: 4px;
            display: none;
        }
        .success {
            background-color: #dff0d8;
            color: #3c763d;
            border: 1px solid #d6e9c6;
        }
        .error {
            background-color: #f2dede;
            color: #a94442;
            border: 1px solid #ebccd1;
        }
        /* Initially hide all optional fields */
        .conditional-field {
            display: none;
        }
        
        /* Loading Animation Styles */
        .loading-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            flex-direction: column;
        }
        .loading-container {
            text-align: center;
        }
        svg {
            width: 100px;
            height: 100px;
        }
        .circle {
            fill: none;
            stroke: #33495e;
            stroke-width: 6;
            stroke-linecap: round;
            transform-origin: 50% 50%;
            stroke-dasharray: 80 283;
            stroke-dashoffset: 0;
        }
        .spinning {
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            from { transform: rotate(0deg); }
            to   { transform: rotate(360deg); }
        }
        .check {
            fill: none;
            stroke: #33495e;
            stroke-width: 6;
            stroke-linecap: round;
            opacity: 0;
        }
        @keyframes drawCheck {
            from { stroke-dashoffset: 57; opacity: 0; }
            to   { stroke-dashoffset: 0; opacity: 1; }
        }
        #loading-text {
            font-family: Arial, sans-serif;
            font-size: 16px;
            font-weight: bold;
            fill: #33495e;
            text-anchor: middle;
            dominant-baseline: middle;
        }
        #status-message {
            font-family: Arial, sans-serif;
            color: #33495e;
            font-size: 16px;
            margin-top: 20px;
        }
        
        /* Added styling for resize handle indicator */
        textarea {
            position: relative;
        }
        .resize-indicator {
            position: absolute;
            right: 10px;
            bottom: 10px;
            width: 10px;
            height: 10px;
            pointer-events: none;
            border-right: 2px solid #ccc;
            border-bottom: 2px solid #ccc;
        }
        
        /* Styling for multiple resume textareas */
        .resume-textarea-wrapper {
            margin-bottom: 15px;
            position: relative;
        }
        
        .resume-textarea-wrapper:not(:first-child) {
            padding-top: 10px;
            border-top: 1px dashed #ccc;
        }
        
        .add-resume-button-container {
            margin-top: 10px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .add-resume-button {
            background-color: #f0f0f0;
            color: #333;
            padding: 8px 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            font-size: 14px;
        }
        
        .add-resume-button:hover {
            background-color: #e0e0e0;
        }
        
        .plus-icon {
            font-weight: bold;
            font-size: 18px;
            margin-right: 5px;
        }
        
        .remove-resume-button {
            background-color: #f8f8f8;
            color: #666;
            border: 1px solid #ddd;
            border-radius: 50%;
            width: 24px;
            height: 24px;
            font-size: 14px;
            line-height: 1;
            cursor: pointer;
            position: absolute;
            right: 0;
            top: 0;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .remove-resume-button:hover {
            background-color: #f0f0f0;
            color: #e74c3c;
        }
        
        #resume-count-info {
            margin: 0;
            color: #666;
        }
    </style>


    <!-- Page Header with User Info - Hidden but still accessible to JavaScript -->
    <div class="header" style="display: none;">
        <div class="user-info">
            <!-- This is the user element with data-portal-user-name attribute -->
            <a href="/account/profile" data-portal-profile="" title="Profile"><span class="theme-portal-username" data-portal-user-name="">Hi, optiontrader91</span></a>
        </div>
    </div>
    
    <!-- Main Content -->
    <div class="content">
        <div class="form-container">
            
            <form id="customResumeForm" enctype="multipart/form-data">
                <!-- Hidden field for username -->
                <input type="hidden" id="username" name="username" value="">
                
                <!-- Form fields as provided -->
                <div class="form-field">
                    <label for="job">Step 1. Choose job source <span style="color: red;">*</span></label>
                    <select id="job" name="job" required>
                        <option value="">-- Select --</option>
                        <option value="publicURL">Public URL</option>
                        <option value="uploadFile">Upload File</option>
                        <option value="pasteText">Copy & Paste</option>
                        <option value="CRM">ATS/CRM (Coming soon!)</option>
                    </select>
                </div>
                <div class="form-field conditional-field job-field" id="joption1-container">
                    <label for="joption1">Option 1: Job URL</label>
                    <input type="text" id="joption1" name="joption1">
                    <small>Enter public facing job url https://sample.com/ats_engineer_duties</small>
                </div>
                <div class="form-field conditional-field job-field" id="joption2-container">
                    <label for="joption2">Option 2: Job Upload</label>
                    <input type="file" id="joption2" name="joption2" accept=".pdf,.doc,.docx,.txt">
                    <small>Max file size: 1MB (single file only)</small>
                </div>
                <div class="form-field conditional-field job-field" id="joption3-container">
                    <label for="joption3">Option 3: Paste Job Description</label>
                    <textarea id="joption3" name="joption3" placeholder="Copy and paste your job description here"></textarea>
                    <small>You can resize this text box by dragging the bottom-right corner</small>
                </div>
                <div class="form-field">
                    <label for="resume">Step 2. Choose resume source <span style="color: red;">*</span></label>
                    <select id="resume" name="resume" required>
                        <option value="">-- Select --</option>
                        <option value="publicURL">Public URL</option>
                        <option value="uploadFile">Upload File(s)</option>
                        <option value="pasteText">Copy & Paste</option>
                        <option value="CRM">ATS/CRM (Coming soon!)</option>
                    </select>
                </div>
                <div class="form-field conditional-field resume-field" id="roption1-container">
                    <label for="roption1">Option 1: Resume URL</label>
                    <input type="text" id="roption1" name="roption1">
                    <small>Enter public facing job url https://sample.com/ats-resume</small>
                </div>
                <div class="form-field conditional-field resume-field" id="roption2-container">
                    <label for="roption2">Option 2: Resume Upload</label>
                    <input type="file" id="roption2" name="roption2" multiple accept=".pdf,.doc,.docx,.txt,.rtf">
                    <small>Max file size: 1MB per file (up to 10 files)</small>
                </div>
                <div class="form-field conditional-field resume-field" id="roption3-container">
                    <div id="resume-textareas-container">
                        <div class="resume-textarea-wrapper">
                            <label for="roption3-1">Option 3: Paste Resume #1</label>
                            <textarea id="roption3-1" name="roption3-1" class="resume-textarea" placeholder="Copy and paste your resume here"></textarea>
                            <small>You can resize this text box by dragging the bottom-right corner</small>
                        </div>
                    </div>
                    <div class="add-resume-button-container">
                        <button type="button" id="add-resume-button" class="add-resume-button">
                            <span class="plus-icon">+</span> Add Another Resume
                        </button>
                        <small id="resume-count-info">1 of 10 resumes</small>
                    </div>
                </div>
                <div class="form-field">
                    <label for="position">Step 3. Add additional screening questions:</label>
                    <select id="position" name="position">
                        <option value="">-- Select --</option>
                        <option value="yes">Yes</option>
                        <option value="no">No</option>
                    </select>
                </div>
                <div class="form-field conditional-field question-field">
                    <label for="question1">Question 1: </label>
                    <input type="text" id="question1" name="question1">
                </div>
                <div class="form-field conditional-field question-field">
                    <label for="question2">Question 2: </label>
                    <input type="text" id="question2" name="question2">
                </div>
                <div class="form-field conditional-field question-field">
                    <label for="question3">Question 3: </label>
                    <input type="text" id="question3" name="question3">
                </div>
                
                <!-- Hidden field for submission ID -->
                <input type="hidden" id="submissionId" name="submissionId" value="">
                
                <button type="submit" class="submit-btn">Submit</button>
            </form>
            
            <div id="formResponse" class="form-response"></div>
        </div>
    </div>
    
    <!-- Loading Animation Overlay -->
    <div class="loading-overlay" id="loadingOverlay">
        <div class="loading-container">
            <svg viewBox="0 0 100 100">
                <circle id="spinner" class="circle spinning" cx="50" cy="50" r="45" />
                <path id="checkmark" class="check" d="M30 50 L45 65 L70 40" stroke-dasharray="57" stroke-dashoffset="57"/>
                <text id="loading-text" x="50" y="50">Processing...</text>
            </svg>
            <p id="status-message">Your resume and job files are being processed...</p>
        </div>
    </div>
    
    <!-- Hidden iframes for Zoho form submission -->
    <iframe id="zohoTargetFrame" name="zohoTargetFrame" style="display:none;"></iframe>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Define a scoreLog object to track candidate scores
            const scoreLog = {
                entries: [],
                isComplete: false,
                
                // Add a new score entry
                addEntry: function(candidateId, score, details) {
                    this.entries.push({
                        candidateId: candidateId,
                        score: score,
                        details: details,
                        timestamp: new Date().toISOString()
                    });
                    
                    console.log(`Score added for candidate ${candidateId}: ${score}`);
                    
                    // Trigger a custom event when a score is added
                    const scoreAddedEvent = new CustomEvent('scoreAdded', { 
                        detail: { candidateId, score, details } 
                    });
                    document.dispatchEvent(scoreAddedEvent);
                    
                    // Check if this was the last expected score
                    this.checkIfComplete();
                },
                
                // Mark scoring as complete - call this when all scores are processed
                markComplete: function() {
                    this.isComplete = true;
                    console.log("Scoring process complete!");
                    
                    // Trigger a custom event when scoring is complete
                    const scoringCompleteEvent = new CustomEvent('scoringComplete', { 
                        detail: { totalEntries: this.entries.length } 
                    });
                    document.dispatchEvent(scoringCompleteEvent);
                    
                    // Automatically stop the animation
                    stopLoadingAnimation();
                },
                
                // Check if scoring is complete based on expected count
                checkIfComplete: function() {
                    // Example logic: If we have uploaded N resumes, and have N scores, we're done
                    const expectedScores = window.uploadedResumeCount || 1;
                    
                    if (this.entries.length >= expectedScores) {
                        this.markComplete();
                    }
                },
                
                // Get summary of scores
                getSummary: function() {
                    return {
                        count: this.entries.length,
                        averageScore: this.entries.length > 0 ? 
                            this.entries.reduce((sum, entry) => sum + entry.score, 0) / this.entries.length : 0,
                        complete: this.isComplete
                    };
                }
            };

            // Function to add a score - can be called from anywhere in your code
            window.logCandidateScore = function(candidateId, score, details) {
                scoreLog.addEntry(candidateId, score, details);
            };
            
            // Function to manually mark processing as complete
            window.markProcessingComplete = function() {
                scoreLog.markComplete();
            };
            
            // IMPROVED: Extract username from data-portal-user-name element
            function extractUsername() {
                const usernameSpan = document.querySelector('span.theme-portal-username[data-portal-user-name]');
                
                if (usernameSpan) {
                    // Log the raw element to inspect it
                    console.log('Username element found:', usernameSpan);
                    console.log('Username element HTML:', usernameSpan.outerHTML);
                    console.log('Username element content:', usernameSpan.textContent);
                    
                    const spanText = usernameSpan.textContent || '';
                    // Try different extraction methods
                    
                    // Method 1: Standard replace
                    let username = spanText.replace('Hi, ', '').trim();
                    console.log('Method 1 extracted username:', username);
                    
                    // If that worked, return it
                    if (username && username !== '') {
                        return username;
                    }
                    
                    // Method 2: Try regex
                    const match = spanText.match(/Hi,\s+(.*)/i);
                    if (match && match[1]) {
                        username = match[1].trim();
                        console.log('Method 2 extracted username using regex:', username);
                        return username;
                    }
                    
                    // Method 3: Direct content as fallback
                    if (spanText && spanText.trim() !== '') {
                        console.log('Method 3 using direct text content:', spanText.trim());
                        return spanText.trim();
                    }
                }
                
                // Method 4: Try to find username in the header HTML
                const header = document.querySelector('.header');
                if (header) {
                    const headerHTML = header.innerHTML || '';
                    const usernameMatch = headerHTML.match(/Hi,\s+([^<]+)/);
                    if (usernameMatch && usernameMatch[1]) {
                        const foundUsername = usernameMatch[1].trim();
                        console.log('Method 4 extracted username from header HTML:', foundUsername);
                        return foundUsername;
                    }
                }
                
                // If all methods fail, generate a dynamic identifier
                const dynamicUsername = 'user_' + Date.now();
                console.warn('Username extraction failed, using dynamic identifier:', dynamicUsername);
                return dynamicUsername;
            }
            
            // Ensure username field is filled correctly with the extracted username
            const extractedUsername = extractUsername();
            console.log('Final extracted username:', extractedUsername);
            
            // Fill the hidden username field with extracted username
            document.getElementById('username').value = extractedUsername;
            
            // Log the extracted username to ensure it's working
            console.log('Username set in hidden field:', extractedUsername);
            
            // Create a global variable to hold the username for all to access
            window.currentUsername = extractedUsername;
            
            // Handle conditional display for Step 1: Job source
            const jobSelect = document.getElementById('job');
            const joption1Container = document.getElementById('joption1-container');
            const joption2Container = document.getElementById('joption2-container');
            const joption3Container = document.getElementById('joption3-container');
            
            jobSelect.addEventListener('change', function() {
                // Hide all job fields first
                const jobFields = document.querySelectorAll('.job-field');
                jobFields.forEach(field => field.style.display = 'none');
                
                // Show the appropriate field based on selection
                if (this.value === 'publicURL') {
                    joption1Container.style.display = 'block';
                } else if (this.value === 'uploadFile') {
                    joption2Container.style.display = 'block';
                } else if (this.value === 'pasteText') {
                    joption3Container.style.display = 'block';
                }
                // For CRM option, all fields remain hidden
            });
            
            // Handle conditional display for Step 2: Resume source
            const resumeSelect = document.getElementById('resume');
            const roption1Container = document.getElementById('roption1-container');
            const roption2Container = document.getElementById('roption2-container');
            const roption3Container = document.getElementById('roption3-container');
            
            resumeSelect.addEventListener('change', function() {
                // Hide all resume fields first
                const resumeFields = document.querySelectorAll('.resume-field');
                resumeFields.forEach(field => field.style.display = 'none');
                
                // Show the appropriate field based on selection
                if (this.value === 'publicURL') {
                    roption1Container.style.display = 'block';
                } else if (this.value === 'uploadFile') {
                    roption2Container.style.display = 'block';
                } else if (this.value === 'pasteText') {
                    roption3Container.style.display = 'block';
                }
                // For CRM option, all fields remain hidden
            });
            
            // Handle conditional display for Step 3: Screening questions
            const positionSelect = document.getElementById('position');
            const questionFields = document.querySelectorAll('.question-field');
            
            positionSelect.addEventListener('change', function() {
                // Show/hide question fields based on selection
                questionFields.forEach(field => {
                    field.style.display = this.value === 'yes' ? 'block' : 'none';
                });
            });
            
            // Add file size and count validation
            const fileInputs = document.querySelectorAll('input[type="file"]');
            const MAX_FILE_SIZE = 1 * 1024 * 1024; // 1MB in bytes
            const MAX_RESUME_FILES = 10;
            
            fileInputs.forEach(input => {
                input.addEventListener('change', function() {
                    let filesValid = true;
                    let errorMessage = '';
                    
                    // Check file count for resume upload (roption2)
                    if (this.id === 'roption2' && this.files.length > MAX_RESUME_FILES) {
                        filesValid = false;
                        errorMessage = `You can upload a maximum of ${MAX_RESUME_FILES} files. You selected ${this.files.length} files.`;
                    }
                    
                    // Check file size for all inputs
                    if (filesValid) {
                        for (let i = 0; i < this.files.length; i++) {
                            if (this.files[i].size > MAX_FILE_SIZE) {
                                filesValid = false;
                                errorMessage = `One or more files exceed the 1MB limit. Please select smaller files.`;
                                break;
                            }
                        }
                    }
                    
                    if (!filesValid) {
                        alert(errorMessage);
                        this.value = ''; // Clear the input
                    }
                });
            });
            
            // Loading animation functionality
            const loadingOverlay = document.getElementById('loadingOverlay');
            const spinner = document.getElementById('spinner');
            const checkmark = document.getElementById('checkmark');
            const loadingText = document.getElementById('loading-text');
            const statusMessage = document.getElementById('status-message');
            
            // Function to show the loading animation
            function showLoadingAnimation() {
                // Reset animation state
                scoreLog.entries = [];
                scoreLog.isComplete = false;
                
                checkmark.style.opacity = '0';
                spinner.style.opacity = '1';
                spinner.classList.add('spinning');
                loadingText.style.opacity = '1';
                loadingText.textContent = 'Processing...';
                statusMessage.textContent = 'Your resume and job files are being processed...';
                
                // Display the overlay
                loadingOverlay.style.display = 'flex';
            }
            
            // Function to stop the loading animation and show completion
            function stopLoadingAnimation() {
                spinner.classList.remove('spinning');
                spinner.style.opacity = '0';
                loadingText.style.opacity = '0';
                checkmark.style.opacity = '1';
                checkmark.style.animation = 'drawCheck 0.5s forwards';
                
                // Update status message with score summary if available
                const summary = scoreLog.getSummary();
                statusMessage.textContent = `Processing complete! ${summary.count} resume(s) analyzed. Redirecting to results...`;
                
                // Redirect after delay
                setTimeout(() => {
                    window.location.href = "https://www.getpurplesquirrel.com/resume-screener-app";
                }, 2000);
            }
            
            // NEW FUNCTION: Convert file to Base64
            function fileToBase64(file) {
                return new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.readAsDataURL(file);
                    
                    reader.onload = () => {
                        try {
                            // Get the Base64 string (remove the data URL prefix)
                            let base64String = reader.result;
                            // Remove the data:mime/type;base64, prefix
                            base64String = base64String.split(',')[1];
                            
                            resolve({
                                base64: base64String,
                                name: file.name,
                                type: file.type,
                                size: file.size
                            });
                        } catch (error) {
                            reject(error);
                        }
                    };
                    
                    reader.onerror = error => {
                        console.error('Error reading file:', error);
                        reject(error);
                    };
                });
            }
            
            // NEW FUNCTION: Process files and convert to Base64
            function processFilesToBase64(formData) {
                return new Promise(async (resolve, reject) => {
                    try {
                        const jobSelect = document.getElementById('job');
                        const resumeSelect = document.getElementById('resume');
                        
                        // Process job file if uploaded
                        if (jobSelect.value === 'uploadFile') {
                            const jobFileInput = document.getElementById('joption2');
                            if (jobFileInput.files.length > 0) {
                                statusMessage.textContent = 'Converting job description file to Base64...';
                                const jobFile = jobFileInput.files[0];
                                const jobFileData = await fileToBase64(jobFile);
                                
                                // Add job file data to formData
                                formData.append('has_job_file', 'true');
                                formData.append('job_filename', jobFileData.name);
                                formData.append('job_filetype', jobFileData.type);
                                formData.append('job_filesize', jobFileData.size);
                                formData.append('job_file_base64', jobFileData.base64);
                                
                                console.log(`Job file encoded to Base64: ${jobFileData.name} (${jobFileData.type})`);
                            }
                        }
                        
                        // Process resume files if uploaded
                        if (resumeSelect.value === 'uploadFile') {
                            const resumeFileInput = document.getElementById('roption2');
                            const resumeFiles = resumeFileInput.files;
                            
                            if (resumeFiles.length > 0) {
                                // Add counters and metadata
                                formData.append('resume_count', resumeFiles.length);
                                
                                // Process each resume file
                                for (let i = 0; i < resumeFiles.length; i++) {
                                    statusMessage.textContent = `Converting resume file ${i+1} of ${resumeFiles.length} to Base64...`;
                                    const resumeFile = resumeFiles[i];
                                    const resumeFileData = await fileToBase64(resumeFile);
                                    
                                    // Add resume file data to formData
                                    formData.append(`resume_filename_${i}`, resumeFileData.name);
                                    formData.append(`resume_filetype_${i}`, resumeFileData.type);
                                    formData.append(`resume_filesize_${i}`, resumeFileData.size);
                                    formData.append(`resume_file_base64_${i}`, resumeFileData.base64);
                                    
                                    console.log(`Resume ${i+1} encoded to Base64: ${resumeFileData.name} (${resumeFileData.type})`);
                                }
                            }
                        }
                        
                        // Resolve with the augmented formData
                        resolve(formData);
                    } catch (error) {
                        console.error('Error processing files to Base64:', error);
                        reject(error);
                    }
                });
            }
            
            // Variables for polling
            let pollingInterval = null;
            let submissionId = null;
            
            // Function to start polling for completion status
            function startPolling(id) {
                // Store the submission ID for use in polling
                submissionId = id;
                
                console.log(`Starting polling for submission ${submissionId}`);
                statusMessage.textContent = 'Waiting for processing to complete...';
                
                // First poll after 6 seconds
                setTimeout(() => {
                    // Check status immediately
                    checkCompletionStatus();
                    
                    // Then set up interval to check every 3 seconds
                    pollingInterval = setInterval(checkCompletionStatus, 3000);
                }, 6000);
                
                // Set a maximum polling time (5 minutes)
                setTimeout(() => {
                    if (pollingInterval) {
                        console.log('Maximum polling time reached (5 minutes), stopping polling');
                        clearInterval(pollingInterval);
                        
                        // Only show timeout message if not already complete
                        if (!scoreLog.isComplete) {
                            statusMessage.textContent = 'Processing is taking longer than expected. Redirecting to results...';
                            setTimeout(() => {
                                markProcessingComplete();
                            }, 2000);
                        }
                    }
                }, 300000); // 5 minutes
            }
            
            // Function to stop polling
            function stopPolling() {
                if (pollingInterval) {
                    console.log('Stopping polling interval');
                    clearInterval(pollingInterval);
                    pollingInterval = null;
                }
            }
            
            // Function to check completion status
            function checkCompletionStatus() {
                if (!submissionId) {
                    console.error('No submissionId available for polling');
                    return;
                }
                
                const pollingUrl = `https://hook.us1.make.com/jww4g7mnladsf1zyr5y20uyfnupjx8r5?submissionId=${submissionId}`;
                console.log(`Polling webhook: ${pollingUrl}`);
                
                fetch(pollingUrl)
                    .then(response => {
                        // Check if the response is JSON
                        const contentType = response.headers.get('content-type');
                        if (contentType && contentType.includes('application/json')) {
                            return response.json();
                        } else {
                            // If not JSON, try to get text
                            return response.text().then(text => {
                                try {
                                    // Try to parse text as JSON
                                    return JSON.parse(text);
                                } catch (e) {
                                    console.warn('Response is not JSON:', text);
                                    // Return a structured object indicating HTML response
                                    return { 
                                        status: 'error', 
                                        message: 'Received HTML instead of JSON', 
                                        html: text 
                                    };
                                }
                            });
                        }
                    })
                    .then(data => {
                        console.log('Webhook response:', data);
                        
                        // Check if we received a proper JSON response
                        if (data && typeof data === 'object') {
                            // Handle proper JSON response
                            if (data.status === 'complete') {
                                console.log('Processing complete!');
                                statusMessage.textContent = 'Processing complete! Preparing results...';
                                
                                // Stop polling
                                stopPolling();
                                
                                // Process any scores that were returned
                                if (data.scores && Array.isArray(data.scores)) {
                                    console.log(`Received ${data.scores.length} scores`);
                                    data.scores.forEach(score => {
                                        logCandidateScore(score.candidateId, score.score, score.details);
                                    });
                                } else {
                                    // No scores received, just mark as complete
                                    markProcessingComplete();
                                }
                            } else if (data.status === 'processing') {
                                // Still processing, update message
                                statusMessage.textContent = `Still processing: ${data.message || 'Please wait...'}`;
                            } else if (data.status === 'error') {
                                // Error in processing
                                console.error('Error in processing:', data.message);
                                statusMessage.textContent = `Error: ${data.message || 'An unknown error occurred'}`;
                                stopPolling();
                                
                                // Show error message in form response
                                const formResponse = document.getElementById('formResponse');
                                formResponse.textContent = data.message || 'An error occurred during processing.';
                                formResponse.className = 'form-response error';
                                formResponse.style.display = 'block';
                            } else if (data.html) {
                                // We received HTML instead of JSON
                                console.log('Received HTML response, treating as complete');
                                
                                // Extract any ID from the HTML response if possible
                                let responseId = '';
                                const idMatch = data.html.match(/id=([^"&]+)/);
                                if (idMatch && idMatch[1]) {
                                    responseId = idMatch[1];
                                    console.log('Extracted ID from HTML response:', responseId);
                                }
                                
                                // Stop polling and mark as complete
                                stopPolling();
                                markProcessingComplete();
                            }
                        } else {
                            console.warn('Unexpected response format:', data);
                            // Continue polling, it might eventually return a proper response
                        }
                    })
                    .catch(error => {
                        console.error('Error polling webhook:', error);
                        // Continue polling despite errors
                    });
            }
            
            // Helper function to add a field to a form
            function addFieldToForm(form, name, value) {
                const field = document.createElement('input');
                field.type = 'hidden';
                field.name = name;
                field.value = value;
                form.appendChild(field);
                return field;
            }
            
            // ENHANCED: Multi-approach function to handle Zoho submission
            function submitToZoho(username, submissionId) {
                try {
                    console.log('Starting Zoho submission process with enhanced approach...', { username, submissionId });
                    
                    // Ensure we have valid values with dynamic fallback
                    username = username || ('user_' + Date.now());
                    submissionId = submissionId || username + '_' + Date.now();
                    
                    // Get form field values
                    const jobSelect = document.getElementById('job');
                    const resumeSelect = document.getElementById('resume');
                    const positionSelect = document.getElementById('position');
                    
                    // APPROACH 1: Direct POST via fetch API (most reliable for text fields)
                    console.log('Attempting Zoho submission via fetch API...');
                    
                    // Create a FormData object for the submission
                    const zohoFormData = new FormData();
                    
                    // Add all required Zoho form fields
                    // Common form fields Zoho might expect
                    zohoFormData.append('xnQsjsdp', 'c926119bee12dc8f08205de11ea3b3aacd4c5a3a62a56b74a2930b71bafaf16e'); 
                    zohoFormData.append('xmIwtLD', 'f30e0a943e797ef60433df92883e1f46a11ee0ddd9059596f41499a55c918e99');
                    zohoFormData.append('actionType', 'TGVhZHM=');
                    zohoFormData.append('returnURL', '');
                    
                    // Core fields
                    zohoFormData.append('Username', username);
                    zohoFormData.append('Submission ID', submissionId);
                    zohoFormData.append('Job Source', jobSelect.value);
                    zohoFormData.append('Resume Source', resumeSelect.value);
                    zohoFormData.append('Additional Questions', positionSelect.value || 'no');
                    
                    // Job fields
                    if (jobSelect.value === 'publicURL') {
                        zohoFormData.append('Job URL', document.getElementById('joption1').value || '');
                    } else if (jobSelect.value === 'pasteText') {
                        zohoFormData.append('Job Paste', document.getElementById('joption3').value || '');
                    }
                    
                    // Resume fields (text-based fields only for fetch approach)
                    if (resumeSelect.value === 'publicURL') {
                        zohoFormData.append('Resume(s) URL', document.getElementById('roption1').value || '');
                    } else if (resumeSelect.value === 'pasteText') {
                        // Handle multiple resume paste fields
                        const resumeTextareas = document.querySelectorAll('.resume-textarea');
                        resumeTextareas.forEach((textarea, index) => {
                            if (textarea.value.trim()) {
                                const resumeNumber = index + 1;
                                zohoFormData.append(`Resume Paste ${resumeNumber}`, textarea.value);
                                
                                // Also add the first one as the main Resume Paste
                                if (resumeNumber === 1) {
                                    zohoFormData.append('Resume Paste', textarea.value);
                                }
                            }
                        });
                    }
                    
                    // Question fields if applicable
                    if (positionSelect.value === 'yes') {
                        if (document.getElementById('question1').value.trim()) {
                            zohoFormData.append('Question 1', document.getElementById('question1').value);
                        }
                        if (document.getElementById('question2').value.trim()) {
                            zohoFormData.append('Question 2', document.getElementById('question2').value);
                        }
                        if (document.getElementById('question3').value.trim()) {
                            zohoFormData.append('Question 3', document.getElementById('question3').value);
                        }
                    }
                    
                    // Add metadata fields
                    zohoFormData.append('Added Time', new Date().toISOString());
                    zohoFormData.append('Referrer Name', document.referrer || window.location.href || 'Unknown');
                    
                    // Make the fetch request (note: files can't be sent this way due to CORS)
                    fetch('https://forms.zohopublic.com/xoo/form/ResumeScreenerDynamicFiles/formperma/pjPYaosmnAbiv52anOuMikTY1WLRcIJuHqmUfs3VlGU/htmlRecords/submit', {
                        method: 'POST',
                        body: zohoFormData,
                        mode: 'no-cors' // Important for cross-origin requests
                    })
                    .then(response => {
                        console.log('Zoho fetch submission response received:', response);
                    })
                    .catch(error => {
                        console.error('Error with Zoho fetch submission:', error);
                        // If fetch approach fails, try the window.open approach
                        useWindowOpenApproach();
                    });
                    
                    // APPROACH 2: Hidden form with target="_blank" (as a backup)
                    function useWindowOpenApproach() {
                        console.log('Attempting Zoho submission via window.open approach...');
                        
                        // Create a new form specifically for Zoho
                        const zohoForm = document.createElement('form');
                        zohoForm.id = 'hiddenZohoForm';
                        zohoForm.method = 'POST';
                        zohoForm.action = 'https://forms.zohopublic.com/xoo/form/ResumeScreenerDynamicFiles/formperma/pjPYaosmnAbiv52anOuMikTY1WLRcIJuHqmUfs3VlGU/htmlRecords/submit';
                        zohoForm.enctype = 'multipart/form-data';
                        zohoForm.target = '_blank'; // Open in new window
                        zohoForm.style.display = 'none';
                        document.body.appendChild(zohoForm);
                        
                        // Add Zoho-specific fields
                        addFieldToForm(zohoForm, 'xnQsjsdp', 'c926119bee12dc8f08205de11ea3b3aacd4c5a3a62a56b74a2930b71bafaf16e');
                        addFieldToForm(zohoForm, 'xmIwtLD', 'f30e0a943e797ef60433df92883e1f46a11ee0ddd9059596f41499a55c918e99');
                        addFieldToForm(zohoForm, 'actionType', 'TGVhZHM=');
                        addFieldToForm(zohoForm, 'returnURL', '');
                        
                        // Core fields
                        addFieldToForm(zohoForm, 'Username', username);
                        addFieldToForm(zohoForm, 'Submission ID', submissionId);
                        addFieldToForm(zohoForm, 'Job Source', jobSelect.value);
                        addFieldToForm(zohoForm, 'Resume Source', resumeSelect.value);
                        addFieldToForm(zohoForm, 'Additional Questions', positionSelect.value || 'no');
                        
                        // Job fields
                        if (jobSelect.value === 'publicURL') {
                            addFieldToForm(zohoForm, 'Job URL', document.getElementById('joption1').value || '');
                        } else if (jobSelect.value === 'pasteText') {
                            addFieldToForm(zohoForm, 'Job Paste', document.getElementById('joption3').value || '');
                        } else if (jobSelect.value === 'uploadFile') {
                            // For file uploads, we need to clone the file input
                            const jobFileInput = document.getElementById('joption2');
                            if (jobFileInput.files.length > 0) {
                                try {
                                    const clonedInput = document.createElement('input');
                                    clonedInput.type = 'file';
                                    clonedInput.name = 'Job Upload';
                                    
                                    // Use the DataTransfer API to clone files if possible
                                    const dt = new DataTransfer();
                                    dt.items.add(jobFileInput.files[0]);
                                    clonedInput.files = dt.files;
                                    zohoForm.appendChild(clonedInput);
                                    console.log('Added job file to Zoho form');
                                } catch (e) {
                                    console.error('Could not clone job file:', e);
                                    // Add a note if file cloning fails
                                    addFieldToForm(zohoForm, 'Job Upload Error', 'Could not clone file: ' + e.message);
                                }
                            }
                        }
                        
                        // Resume fields
                        if (resumeSelect.value === 'publicURL') {
                            addFieldToForm(zohoForm, 'Resume(s) URL', document.getElementById('roption1').value || '');
                        } else if (resumeSelect.value === 'pasteText') {
                            // Handle multiple resume paste fields
                            const resumeTextareas = document.querySelectorAll('.resume-textarea');
                            resumeTextareas.forEach((textarea, index) => {
                                if (textarea.value.trim()) {
                                    const resumeNumber = index + 1;
                                    addFieldToForm(zohoForm, `Resume Paste ${resumeNumber}`, textarea.value);
                                    
                                    // Also add the first one as the main Resume Paste
                                    if (resumeNumber === 1) {
                                        addFieldToForm(zohoForm, 'Resume Paste', textarea.value);
                                    }
                                }
                            });
                        } else if (resumeSelect.value === 'uploadFile') {
                            // For file uploads, clone each file input
                            const resumeFileInput = document.getElementById('roption2');
                            if (resumeFileInput.files.length > 0) {
                                for (let i = 0; i < resumeFileInput.files.length; i++) {
                                    try {
                                        // Try to clone the file
                                        const dt = new DataTransfer();
                                        dt.items.add(resumeFileInput.files[i]);
                                        
                                        const clonedInput = document.createElement('input');
                                        clonedInput.type = 'file';
                                        clonedInput.name = 'Resume(s) Upload';
                                        clonedInput.files = dt.files;
                                        
                                        zohoForm.appendChild(clonedInput);
                                        console.log(`Added resume file ${i+1} to Zoho form`);
                                    } catch (e) {
                                        console.error(`Could not clone resume file ${i}:`, e);
                                        // Add a note if file cloning fails
                                        addFieldToForm(zohoForm, `Resume Upload Error ${i}`, 'Could not clone file: ' + e.message);
                                    }
                                }
                            }
                        }
                        
                        // Add metadata fields
                        addFieldToForm(zohoForm, 'Added Time', new Date().toISOString());
                        addFieldToForm(zohoForm, 'Referrer Name', document.referrer || window.location.href || 'Unknown');
                        
                        // Try to get IP address (with a very short timeout)
                        fetch('https://api.ipify.org?format=json')
                            .then(response => response.json())
                            .then(data => {
                                if (data && data.ip) {
                                    addFieldToForm(zohoForm, 'IP Address', data.ip);
                                }
                                submitZohoForm();
                            })
                            .catch(() => {
                                submitZohoForm();
                            });
                        
                        // Function to submit the form
                        function submitZohoForm() {
                            try {
                                console.log('Submitting Zoho form via window.open...');
                                
                                // Log all form fields
                                const formData = new FormData(zohoForm);
                                console.log('Form data being submitted to Zoho:');
                                for (const pair of formData.entries()) {
                                    if (typeof pair[1] !== 'object') { // Don't log file objects
                                        console.log(`${pair[0]}: ${pair[1]}`);
                                    } else {
                                        console.log(`${pair[0]}: [FILE OBJECT]`);
                                    }
                                }
                                
                                // Auto-close the opened window after a delay if it's not an actual form
                                const newWindow = window.open('about:blank', zohoForm.target);
                                
                                // Submit the form
                                zohoForm.submit();
                                console.log('Zoho form submitted via window.open');
                                
                                // Clean up form
                                setTimeout(() => {
                                    try {
                                        document.body.removeChild(zohoForm);
                                    } catch (e) {
                                        console.log('Error removing form:', e);
                                    }
                                }, 2000);
                            } catch (e) {
                                console.error('Error submitting form via window.open:', e);
                                useIframeApproach(); // Try the iframe approach as last resort
                            }
                        }
                    }
                    
                    // APPROACH 3: Traditional iframe approach (as a last resort)
                    function useIframeApproach() {
                        console.log('Attempting Zoho submission via iframe approach...');
                        
                        // Create an iframe to load the Zoho form (or use existing one)
                        let iframe = document.getElementById('zohoTargetFrame');
                        if (!iframe) {
                            iframe = document.createElement('iframe');
                            iframe.id = 'zohoTargetFrame';
                            iframe.name = 'zohoTargetFrame';
                            iframe.style.display = 'none';
                            document.body.appendChild(iframe);
                        }
                        
                        // Create a new form
                        const zohoForm = document.createElement('form');
                        zohoForm.id = 'zohoIframeForm';
                        zohoForm.method = 'POST';
                        zohoForm.action = 'https://forms.zohopublic.com/xoo/form/ResumeScreenerDynamicFiles/formperma/pjPYaosmnAbiv52anOuMikTY1WLRcIJuHqmUfs3VlGU/htmlRecords/submit';
                        zohoForm.enctype = 'multipart/form-data';
                        zohoForm.target = 'zohoTargetFrame';
                        zohoForm.style.display = 'none';
                        document.body.appendChild(zohoForm);
                        
                        // Add Zoho-specific fields
                        addFieldToForm(zohoForm, 'xnQsjsdp', 'c926119bee12dc8f08205de11ea3b3aacd4c5a3a62a56b74a2930b71bafaf16e');
                        addFieldToForm(zohoForm, 'xmIwtLD', 'f30e0a943e797ef60433df92883e1f46a11ee0ddd9059596f41499a55c918e99');
                        addFieldToForm(zohoForm, 'actionType', 'TGVhZHM=');
                        addFieldToForm(zohoForm, 'returnURL', window.location.href);
                        
                        // Add core fields
                        addFieldToForm(zohoForm, 'Username', username);
                        addFieldToForm(zohoForm, 'Submission ID', submissionId);
                        
                        // Add all other fields from the form (simplified for iframe approach)
                        addFieldToForm(zohoForm, 'Job Source', jobSelect.value);
                        addFieldToForm(zohoForm, 'Resume Source', resumeSelect.value);
                        
                        if (jobSelect.value === 'publicURL') {
                            addFieldToForm(zohoForm, 'Job URL', document.getElementById('joption1').value || '');
                        } else if (jobSelect.value === 'pasteText') {
                            addFieldToForm(zohoForm, 'Job Paste', document.getElementById('joption3').value || '');
                        }
                        
                        if (resumeSelect.value === 'publicURL') {
                            addFieldToForm(zohoForm, 'Resume(s) URL', document.getElementById('roption1').value || '');
                        } else if (resumeSelect.value === 'pasteText') {
                            const firstTextarea = document.querySelector('.resume-textarea');
                            if (firstTextarea && firstTextarea.value.trim()) {
                                addFieldToForm(zohoForm, 'Resume Paste', firstTextarea.value);
                            }
                        }
                        
                        // Add form element for popup prevention (common requirement in Zoho forms)
                        addFieldToForm(zohoForm, 'zc_gad', '');
                        
                        // Submit the form
                        setTimeout(() => {
                            try {
                                console.log('Submitting Zoho form via iframe...');
                                zohoForm.submit();
                                console.log('Zoho form submitted via iframe');
                            } catch (e) {
                                console.error('Error submitting via iframe:', e);
                            }
                        }, 500);
                    }
                    
                    // Also try a direct POST via a form in a new named window 
                    // This is a fourth approach that often works when others fail
                    setTimeout(() => {
                        console.log('Attempting direct form POST via named window...');
                        
                        // Create a simple form with just the essential fields
                        const directForm = document.createElement('form');
                        directForm.id = 'directZohoForm';
                        directForm.method = 'POST';
                        directForm.action = 'https://forms.zohop';
                        directForm.enctype = 'multipart/form-data';
                        directForm.target = 'zohoWindow';
                        directForm.style.display = 'none';
                        document.body.appendChild(directForm);
                        
                        // Add core fields only
                        addFieldToForm(directForm, 'Username', username);
                        addFieldToForm(directForm, 'Submission ID', submissionId);
                        addFieldToForm(directForm, 'Added Time', new Date().toISOString());
                        
                        // Zoho-specific fields
                        addFieldToForm(directForm, 'xnQsjsdp', 'c926119bee12dc8f08205de11ea3b3aacd4c5a3a62a56b74a2930b71bafaf16e');
                        addFieldToForm(directForm, 'xmIwtLD', 'f30e0a943e797ef60433df92883e1f46a11ee0ddd9059596f41499a55c918e99');
                        addFieldToForm(directForm, 'actionType', 'TGVhZHM=');
                        addFieldToForm(directForm, 'returnURL', '');
                        
                        try {
                            // Open a named window first
                            const zohoWindow = window.open('', 'zohoWindow', 'width=1,height=1');
                            if (zohoWindow) {
                                // Submit the form to the named window
                                directForm.submit();
                                console.log('Direct form submitted to named window');
                                
                                // Close the window after a short delay
                                setTimeout(() => {
                                    try {
                                        zohoWindow.close();
                                    } catch (e) { }
                                }, 2000);
                            }
                        } catch (e) {
                            console.error('Error with direct window submission:', e);
                        }
                        
                        // Clean up
                        setTimeout(() => {
                            try {
                                document.body.removeChild(directForm);
                            } catch (e) { }
                        }, 2000);
                    }, 1000);
                    
                } catch (error) {
                    console.error('Error with Zoho submission:', error);
                }
            }
            
            // UPDATED: Handle form submission with both Make.com and Zoho
            document.getElementById('customResumeForm').addEventListener('submit', function(event) {
                // Stop the default submission
                event.preventDefault();
                
                // Validate the form (keeping existing validation)
                const jobSelect = document.getElementById('job');
                const resumeSelect = document.getElementById('resume');
                
                if (!jobSelect.value) {
                    alert('Please select a job source in Step 1.');
                    jobSelect.focus();
                    return false;
                }
                
                if (!resumeSelect.value) {
                    alert('Please select a resume source in Step 2.');
                    resumeSelect.focus();
                    return false;
                }
                
                // More validations...
                if (jobSelect.value === 'pasteText') {
                    const jobTextarea = document.getElementById('joption3');
                    if (!jobTextarea.value.trim()) {
                        alert('Please paste a job description in the text box.');
                        jobTextarea.focus();
                        return false;
                    }
                }
                
                if (resumeSelect.value === 'pasteText') {
                    // Check that at least one resume textarea has content
                    const resumeTextareas = document.querySelectorAll('.resume-textarea');
                    let hasContent = false;
                    
                    resumeTextareas.forEach(textarea => {
                        if (textarea.value.trim()) {
                            hasContent = true;
                        }
                    });
                    
                    if (!hasContent) {
                        alert('Please paste at least one resume in the text boxes.');
                        document.querySelector('.resume-textarea').focus();
                        return false;
                    }
                }
                
                // Get the username from the hidden field (which was set during page load)
                // or from the global variable, or generate a dynamic one if neither exists
                const username = document.getElementById('username').value || window.currentUsername || ('user_' + Date.now());
                
                // Update the hidden field with the username
                document.getElementById('username').value = username;
                
                // Log the username to confirm
                console.log('Using username for submission:', username);
                
                // Generate submission ID with the username
                const submissionId = username + '_' + Date.now();
                
                // Save a copy of the form data for Make.com
                const makeFormData = new FormData(this);
                makeFormData.append('submissionId', submissionId);
                
                // Explicitly set the username to ensure it's sent to Make.com
                makeFormData.set('username', username);
                console.log('Sending username to Make.com:', username);
                
                // Count resumes for processing
                window.uploadedResumeCount = countUploadedResumes(makeFormData);
                
                // Show loading animation
                showLoadingAnimation();
                statusMessage.textContent = 'Processing your submission...';
                
                // Submit to Make.com in background
                processFilesToBase64(makeFormData)
                    .then(processedFormData => {
                        // Double-check username is in the processed form data
                        if (!processedFormData.get('username')) {
                            processedFormData.set('username', username);
                            console.log('Fixed username in processed form data:', username);
                        }
                        
                        fetch('https://hook.us1.make.com/n2qll3gblut2oqd6x7x149i650l3s1dx', {
                            method: 'POST',
                            body: processedFormData
                        })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error(`HTTP error! Status: ${response.status}`);
                            }
                            return response;
                        })
                        .then(() => {
                            console.log('Form submitted to Make.com, starting polling');
                            statusMessage.textContent = 'Processing your data. Please wait...';
                            
                            // Start polling for completion status
                            startPolling(submissionId);
                        })
                        .catch(error => {
                            console.error('Form submission error to Make.com:', error);
                            statusMessage.textContent = 'Error with Make.com submission. Continuing processing...';
                        });
                    })
                    .catch(error => {
                        console.error('Error processing files for Make.com:', error);
                        statusMessage.textContent = 'Error processing files. Continuing with submission...';
                    });
                
                // Also submit to Zoho using our enhanced function
                console.log("Initiating Zoho submission with enhanced multi-approach function...");
                submitToZoho(username, submissionId);
                
                // Return false to prevent default form submission
                return false;
            });
            
            // Initialize resume counter
            let resumeCount = 1;
            const MAX_RESUMES = 10;
            
            // Function to update resume count display
            function updateResumeCountInfo() {
                document.getElementById('resume-count-info').textContent = `${resumeCount} of ${MAX_RESUMES} resumes`;
                
                // Disable add button if max reached
                const addButton = document.getElementById('add-resume-button');
                if (resumeCount >= MAX_RESUMES) {
                    addButton.disabled = true;
                    addButton.style.opacity = '0.5';
                    addButton.style.cursor = 'not-allowed';
                } else {
                    addButton.disabled = false;
                    addButton.style.opacity = '1';
                    addButton.style.cursor = 'pointer';
                }
            }
            
            // Add event listener for the "Add Another Resume" button
            document.getElementById('add-resume-button').addEventListener('click', function() {
                if (resumeCount >= MAX_RESUMES) {
                    alert(`You can add a maximum of ${MAX_RESUMES} resumes.`);
                    return;
                }
                
                resumeCount++;
                
                // Create a new textarea wrapper
                const container = document.getElementById('resume-textareas-container');
                const newWrapper = document.createElement('div');
                newWrapper.className = 'resume-textarea-wrapper';
                
                // Create label, textarea, and small instruction text
                newWrapper.innerHTML = `
                    <label for="roption3-${resumeCount}">Option 3: Paste Resume #${resumeCount}</label>
                    <textarea id="roption3-${resumeCount}" name="roption3-${resumeCount}" class="resume-textarea" 
                    placeholder="Copy and paste your resume here"></textarea>
                    <small>You can resize this text box by dragging the bottom-right corner</small>
                    <button type="button" class="remove-resume-button" title="Remove this resume">×</button>
                `;
                
                // Add the new wrapper to the container
                container.appendChild(newWrapper);
                
                // Add event listener to the remove button
                const removeButton = newWrapper.querySelector('.remove-resume-button');
                removeButton.addEventListener('click', function() {
                    container.removeChild(newWrapper);
                    resumeCount--;
                    
                    // Renumber the remaining textareas
                    const wrappers = container.querySelectorAll('.resume-textarea-wrapper');
                    wrappers.forEach((wrapper, index) => {
                        const number = index + 1;
                        const label = wrapper.querySelector('label');
                        const textarea = wrapper.querySelector('textarea');
                        
                        label.setAttribute('for', `roption3-${number}`);
                        label.textContent = `Option 3: Paste Resume #${number}`;
                        textarea.id = `roption3-${number}`;
                        textarea.name = `roption3-${number}`;
                    });
                    
                    updateResumeCountInfo();
                });
                
                updateResumeCountInfo();
            });
            
            // Add remove buttons to existing resume textareas (for completeness)
            document.querySelectorAll('.resume-textarea-wrapper').forEach((wrapper, index) => {
                // Skip adding remove button to the first textarea if it's the only one
                if (index === 0 && resumeCount === 1) return;
                
                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.className = 'remove-resume-button';
                removeButton.title = 'Remove this resume';
                removeButton.textContent = '×';
                wrapper.appendChild(removeButton);
                
                removeButton.addEventListener('click', function() {
                    wrapper.parentNode.removeChild(wrapper);
                    resumeCount--;
                    updateResumeCountInfo();
                });
            });
            
            // Helper function to count the number of resumes uploaded
            function countUploadedResumes(formData) {
                let count = 0;
                
                // Check which resume source was selected
                const resumeSource = formData.get('resume');
                
                if (resumeSource === 'uploadFile') {
                    // Count files in the upload
                    const files = document.getElementById('roption2').files;
                    count = files.length;
                } 
                else if (resumeSource === 'pasteText') {
                    // Count non-empty textarea entries
                    let textareaIndex = 1;
                    while (formData.has(`roption3-${textareaIndex}`)) {
                        if (formData.get(`roption3-${textareaIndex}`).trim() !== '') {
                            count++;
                        }
                        textareaIndex++;
                    }
                }
                else if (resumeSource === 'publicURL') {
                    // URL source typically means one resume
                    if (formData.get('roption1') && formData.get('roption1').trim() !== '') {
                        count = 1;
                    }
                }
                
                return count > 0 ? count : 1; // Default to 1 if we can't determine the count
            }
            
            // Clean up on page unload
            window.addEventListener('beforeunload', function() {
                // Stop polling if it's active
                if (pollingInterval) {
                    clearInterval(pollingInterval);
                }
            });
            
            // Example: Listen for score events
            document.addEventListener('scoreAdded', function(event) {
                console.log(`Score event received: ${event.detail.candidateId} - ${event.detail.score}`);
                // You could update UI here to show progress
            });
            
            document.addEventListener('scoringComplete', function(event) {
                console.log(`Scoring complete! Total entries: ${event.detail.totalEntries}`);
                // Any additional UI updates when scoring is complete
            });
        });
    </script>
